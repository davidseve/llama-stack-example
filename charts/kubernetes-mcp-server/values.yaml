# Default values for kubernetes-mcp-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  namespace: llama-stack-example

replicaCount: 1

image:
  repository: registry.redhat.io/ubi9/nodejs-20
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# RBAC configuration for Kubernetes API access
rbac:
  create: false
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "configmaps", "secrets"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets", "statefulsets"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["extensions", "networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "list", "watch"]

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

# MCP Server configuration
mcpServer:
  # Port for the MCP server
  port: 8000
  # Port for SSE endpoint (Server-Sent Events)
  ssePort: 8080
  # Node.js package version
  packageVersion: "latest"
  # Environment variables
  env: {}
  # Additional command line arguments
  args: []

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  # Port for MCP protocol
  mcpPort: 8000
  mcpTargetPort: 8000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: kubernetes-mcp-server.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

# livenessProbe:
#   tcpSocket:
#     port: sse-port
#   initialDelaySeconds: 30
#   periodSeconds: 10
#   timeoutSeconds: 5
#   failureThreshold: 3

# readinessProbe:
#   httpGet:
#     path: /sse
#     port: sse-port
#   initialDelaySeconds: 15
#   periodSeconds: 10
#   timeoutSeconds: 5
#   failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# OpenShift specific configuration
openshift:
  # Create OpenShift Route instead of Ingress
  route:
    enabled: true
    host: ""
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
  # Security Context Constraints
  scc:
    create: true
    name: "kubernetes-mcp-server-scc"
